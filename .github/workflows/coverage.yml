name: CI with Coverage

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set environment variables
        env:
          CUCUMBER_URL_FRONT: ${{ vars.CUCUMBER_URL_FRONT }}
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
          TEST_EMAIL: ${{ vars.TEST_EMAIL }}

        run: |
          echo "Environment variables configured"

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install Dependencies
        run: pnpm install

      - name: Run Tests with Coverage
        env:
          CUCUMBER_URL_FRONT: ${{ vars.CUCUMBER_URL_FRONT }}
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
          TEST_EMAIL: ${{ vars.TEST_EMAIL }}
        run: pnpm run coverage

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./coverage

      - name: Set Coverage Message
        id: set-coverage
        shell: bash
        run: |
          echo "coverage_message<<EOF" >> $GITHUB_OUTPUT
          cat ./coverage/coverage-summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment Coverage Report on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: '${{ steps.set-coverage.outputs.coverage_message }}'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
